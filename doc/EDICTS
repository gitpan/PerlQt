There are many styles of programming. Some are not compatible with PerlQt.
If you want your class to be usable from PerlQt, PerlKDE, or their
derivatives, you will want to heed these warnings. Troll Tech does a
pretty good job up front, but when they make a mistake it's permanent.

These first two are fundamental design limitations for PerlQt.

1. NEVER OVERRIDE VIRTUAL FUNCTIONS AND MAKE THEM PRIVATE!
2. NEVER MAKE SIGNALS OR SLOTS WITH MORE THAN THREE ARGUMENTS!
3. Never make member variable access part of the API!
	Always: private: int x; public: int getX(); void setX(int);
4. Never override virtual functions and take off the const (sizeHint)
5. Avoid dependance on QFile and other utility classes that do not have a
   direct string/integer variable/array mapping (QDir and QStrList do)
6. Perl wants to copy return-values, so don't return references in the
   hope of allowing the caller to modify the original.
7. Dicts are not gonna be accessible from Perl
8. Methods with variable argument-lists cannot be called from Perl
9. Don't use void*, unless you want Perl users to see it as an integer
10. const char *, not char *
11. const QString &, not QString &
12. Don't use 'this' as a polymorphic argument
	Avoid: Thingy *getThingy(); const Thingy *getThingy() const;
13. Avoid polymorphism on numerical types alone
	Avoid: void thingy(int); void thingy(enum); void thingy(bool);
14. QStrList arguments should be const, and must deep copy the QStrList
15. Protected methods in classes with private constructors will not be
    accessible from Perl.
