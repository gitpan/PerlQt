
Here is my list of things to do in a random descending list of priority.

* Arbitrary argument-lists (...) between Perl signals and Perl slots.

* Finish upgrade to signals/slots

* Attempt to allow various unsigned/int/long combinations in signals/slots

* Find and fix the $_ contamination with signals/slots

* Delete pQtSigSlots on disconnect()

* Don't forget to try making want_destroy() test for a dead SvREFCNT()
to see if DESTROY() is being called manually.

* Make DELETE a permanent key, and compare directly with &sv_yes, &sv_no,
and &sv_undef

* Write a QGlobal::import() that will only initialize enum values if
they are requested by a module.

* Config script

* Fix bugs

* Get the typemap to read from className and convert to THAT type, not the
one requested

* Create a pembed

* Write a C++ Qt to PerlQt converter (in Perl)

* Add tests

* Compile everything as one library, and see if there is any benefit.

* Allow connections to closure slots.

* Overloaded signals

* Make libperlqt more generic, so as to support other scripting languages?

* Overloaded slots

* Rewrite the whole thing in SWIG, to allow all the other scripting
languages in the world to bask in the glory of PerlQt.

