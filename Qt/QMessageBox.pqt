#include <qmsgbox.h>

suicidal virtual class QMessageBox : virtual QDialog {
    QMessageBox(QWidget * = 0, const char * = 0);
    QMessageBox(const char *, const char *, QMessageBox::Icon {enum}, int, int, int, QWidget * = 0, const char * = 0, bool = TRUE, WFlags {enum} = 0);
    virtual ~QMessageBox();
    static void about(QWidget *, const char *, const char *);
    static void aboutQt(QWidget *, const char * = 0);
    virtual void adjustSize();
    const char *buttonText(int) const;
    static int critical(QWidget *, const char *, const char *, int, int, int = 0);
    static int critical(QWidget *, const char *, const char *, const char * = "OK", const char * = 0, const char * = 0, int = 0, int = -1);
    QMessageBox::Icon {enum} icon() const;
    const QPixmap *iconPixmap() const;
    static int information(QWidget *, const char *, const char *, int, int = 0, int = 0);
    static int information(QWidget *, const char *, const char *, const char * = "OK", const char * = 0, const char * = 0, int = 0, int = -1);
    void setButtonText(int, const char *);
    void setIcon(QMessageBox::Icon {enum});
    void setIconPixmap(const QPixmap &);
    virtual void setStyle(GUIStyle {enum});
    void setText(const char *);
    static QPixmap standardIcon(QMessageBox::Icon {enum}, GUIStyle {enum});
    const char *text() const;
    static int warning(QWidget *, const char *, const char *, int, int, int = 0);
    static int warning(QWidget *, const char *, const char *, const char * = "OK", const char * = 0, const char * = 0, int = 0, int = -1);
protected:
    virtual void keyPressEvent(QKeyEvent *);
    virtual void resizeEvent(QResizeEvent *);
} MessageBox;

%Icon = (
    NoIcon => QMessageBox::NoIcon,
    None => QMessageBox::NoIcon,
    Information => QMessageBox::Information,
    Warning => QMessageBox::Warning,
    Critical => QMessageBox::Critical
);

%Message = (
    Ok => QMessageBox::Ok,
    Cancel => QMessageBox::Cancel,
    Yes => QMessageBox::Yes,
    No => QMessageBox::No,
    Abort => QMessageBox::Abort,
    Retry => QMessageBox::Retry,
    Ignore => QMessageBox::Ignore,
    ButtonMask => QMessageBox::ButtonMask,
    Default => QMessageBox::Default,
    Escape => QMessageBox::Escape,
    FlagMask => QMessageBox::FlagMask
);
