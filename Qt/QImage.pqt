#include <qimage.h>

struct QImage {
    QImage();
    QImage(const char ** {xpm});
    QImage(const QImage &);
    QImage(const char *, const char * = 0);
    QImage(const QSize &, int, int = 0, QImage::Endian {enum} = QImage::IgnoreEndian);
    QImage(int, int, int, int = 0, QImage::Endian {enum} = QImage::IgnoreEndian);
    ~QImage();
    QImage &operator = (const QImage &);
    QImage &operator = (const QPixmap &);
    const char *{serial} operator << () const : pqt_serialize($this);
    void operator >> (const char *{serial}) : pqt_deserialize($this, $1);
    QImage::Endian {enum} bitOrder() const;
    uchar *{ubits} bits() const;
    int bytesPerLine() const;
    QRgb {uint} color(int) const;
    QRgb * {uintarray} colorTable() const;
    QImage convertBitOrder(QImage::Endian {enum}) const;
    QImage convertDepth(int) const;
    QImage convertDepth(int, int) const;
    QImage copy() const;
    bool create(const QSize &, int, int = 0, QImage::Endian {enum} = QImage::IgnoreEndian);
    bool create(int, int, int, int = 0, QImage::Endian {enum} = QImage::IgnoreEndian);
    QImage createAlphaMask(int) const;
    QImage createHeuristicMask(bool = TRUE) const;
    int depth() const;
    void detach();
    void fill(uint);
    bool hasAlphaBuffer() const;
    int height() const;
    static const char *imageFormat(const char *);
    static QStrList {qstrlist &} inputFormats();
    bool isNull() const;
    uchar ** {ubitsarray($this->height(), $this->width(), $this->bytesPerLine())} jumpTable() const;
    bool load(const char *, const char * = 0);
    bool loadFromData(const uchar *{ubits *1}, uint {ubitslen $1}, const char * = 0);
    int numBytes() const;
    int numColors() const;
    static QStrList {qstrlist &} outputFormats();
    QRgb {uint} pixel(int, int) const;
    int pixelIndex(int, int) const;
    QRect rect() const;
    void reset();
    bool save(const char *, const char *) const;
    uchar * {ubits} scanLine(int) const;
    void setAlphaBuffer(bool);
    void setColor(int, QRgb {uint});
    void setNumColors(int);
    void setPixel(int, int, uint);
    QSize size() const;
    static QImage::Endian {enum} systemBitOrder();
    static QImage::Endian {enum} systemByteOrder();
    bool valid(int, int) const;
    int width() const;
} Image;

%Endian = (
    Ignore => QImage::IgnoreEndian,
    Big => QImage::BigEndian,
    Little => QImage::LittleEndian,

    IgnoreEndian => QImage::IgnoreEndian,
    BigEndian => QImage::BigEndian,
    LittleEndian => QImage::LittleEndian
);
