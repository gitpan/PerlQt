#include <qlineedit.h>

suicidal virtual class QLineEdit : virtual QWidget {
    enum EchoMode { Normal, NoEcho, Password };

    QLineEdit(QWidget * = 0, const char * = 0);
    QLineEdit(const QString &, QWidget * = 0, const char * = 0);
    virtual ~QLineEdit();
    int alignment() const;
    void backspace();
    void clear() slot;
    void clearValidator() slot;
    void copy() const;
    void cursorLeft(bool, int = 1);
    void cursorRight(bool, int = 1);
    int cursorPosition() const;
    void cursorWordBackward(bool);
    void cursorWordForward(bool);
    void cut();
    void del();
    void deselect() slot;
    QString displayText() const;
    QLineEdit::EchoMode echoMode() const;
    bool edited() const;
    void end(bool);
    bool frame() const;
    bool hasMarkedText() const;
    void home(bool);
    void insert(const QString &) slot;
    QString markedText() const;
    int maxLength() const;
    void paste();
    virtual QSize minimumSizeHint() const;
    void selectAll() slot;
    void setAlignment(int);
    virtual void setCursorPosition(int);
    virtual void setEchoMode(QLineEdit::EchoMode);
    void setEdited(bool);
    virtual void setEnabled(bool);
    virtual void setFont(const QFont &);
    virtual void setPalette(const QPalette &);
    virtual void setFrame(bool);
    virtual void setMaxLength(int);
    virtual void setSelection(int, int);
    void setText(const QString &) slot;
    virtual void setValidator(const QValidator *);
    virtual QSize sizeHint() const;
    virtual QSizePolicy sizePolicy() const;
    QString text() const;
    bool validateAndSet(const char *, int, int, int);
    const QValidator *validator() const;
protected:
    virtual void dragEnterEvent(QDragEnterEvent *);
    virtual void dropEvent(QDropEvent *);
    virtual void focusInEvent(QFocusEvent *);
    virtual void focusOutEvent(QFocusEvent *);
    virtual void keyPressEvent(QKeyEvent *);
    virtual void leaveEvent(QEvent *);
    virtual void mouseDoubleClickEvent(QMouseEvent *);
    virtual void mouseMoveEvent(QMouseEvent *);
    virtual void mousePressEvent(QMouseEvent *);
    virtual void mouseReleaseEvent(QMouseEvent *);
    virtual void paintEvent(QPaintEvent *);
    void repaintArea(int, int);
    virtual void resizeEvent(QResizeEvent *);
    void returnPressed() signal;
    void textChanged(const QString &) signal;
} Qt::LineEdit;
