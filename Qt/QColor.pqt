#include <qcolor.h>

struct QColor {
    QColor();
    QColor(const char *);
    QColor(const QColor &);
    QColor(QRgb {uint}, uint = 0xffffffff);
    QColor(int, int, int);
    QColor(int, int, int, QColor::Spec {enum});
    QColor &operator = (const QColor &);
    bool operator == (const QColor &) const;
    bool operator != (const QColor &) const;
    const char *{serial} operator << () const : pqt_serialize($this);
    void operator >> (const char *{serial}) : pqt_deserialize($this, $1);
    uint alloc();
    int blue() const;
    static int blue(QRgb {uint}) : qBlue($0);
    static int currentAllocContext();
    QColor dark(int = 200) const;
    static void destroyAllocContext(int);
    static int enterAllocContext();
    static int gray(QRgb {uint}) : qGray($0);
    static int gray(int, int, int) : qGray($0, $1, $2);
    int green() const;
    static int green(QRgb {uint}) : qGreen($0);
    void hsv(int *, int *, int *) const;
    bool isDirty() const;
    bool isValid() const;
    static bool lazyAlloc();
    static void leaveAllocContext();
    QColor light(int = 150) const;
    static int maxColors();
    static int numBitPlanes();
    uint pixel() const;
    int red() const;
    static int red(QRgb {uint}) : qRed($0);
    QRgb {uint} rgb() const;
    static QRgb {uint} rgb(int, int, int) : qRgb($0, $1, $2);
    void rgb(int *, int *, int *) const;
    void setHsv(int, int, int);
    static void setLazyAlloc(bool);
    void setNamedColor(const char *);
    void setRgb(QRgb {uint});
    void setRgb(int, int, int);
} Color;

%Rgb = (
    Dirty => RGB_DIRTY,
    Invalid => RGB_INVALID,
    Direct => RGB_DIRECT,
    Mask => RGB_MASK,

    RGB_DIRTY => RGB_DIRTY,
    RGB_INVALID => RGB_INVALID,
    RGB_DIRECT => RGB_DIRECT,
    RGB_MASK => RGB_MASK
);

%Color{const QColor *} = (
    0 => &color0,
    1 => &color1,
    Black => &black,
    White => &white,
    DarkGray => &darkGray,
    Gray => &gray,
    Grey => &gray,
    LightGray => &lightGray,
    Red => &red,
    Green => &green,
    Blue => &blue,
    Cyan => &cyan,
    Magenta => &magenta,
    Yellow => &yellow,
    DarkRed => &darkRed,
    DarkGreen => &darkGreen,
    DarkBlue => &darkBlue,
    DarkCyan => &darkCyan,
    DarkMagenta => &darkMagenta,
    DarkYellow => &darkYellow,

    color0 => &color0,
    color1 => &color1,
    black => &black,
    white => &white,
    darkGray => &darkGray,
    gray => &gray,
    lightGray => &lightGray,
    red => &red,
    green => &green,
    blue => &blue,
    cyan => &cyan,
    magenta => &magenta,
    yellow => &yellow,
    darkRed => &darkRed,
    darkGreen => &darkGreen,
    darkBlue => &darkBlue,
    darkCyan => &darkCyan,
    darkMagenta => &darkMagenta,
    darkYellow => &darkYellow
);
