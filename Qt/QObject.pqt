#include <qobject.h>

suicidal virtual class QObject {
    QObject(QObject * = 0, const char * = 0);
    virtual ~QObject();
    void blockSignals(bool);
    const QObjectList *{qobjectlist} children() const;
^   virtual const char *className() const;
    static bool connect(const QObject *&{receiver}, const QObject *{sender}, const char *{signal}, const char *{member}) : QObject::connect($1, $2, $0, $3);
    static bool connect(const QObject *{sender}, const char *{signal}, const QObject *&{receiver}, const char *{member});
    bool disconnect(const QObject *&{unreceiver}, const char *{member} = 0);
    static bool disconnect(const QObject *, const char *{signal}, const QObject *&{unreceiver}, const char *{member});
    void dumpObjectInfo();
    void dumpObjectTree();
    virtual bool event(QEvent *);
    virtual bool eventFilter(QObject *, QEvent *);
    bool highPriority() const;
    void insertChild(QObject *);
    void installEventFilter(const QObject *);
    bool isWidgetType() const;
    void killTimer(int);
    void killTimers();
^   virtual QMetaObject *{qmetaobject} metaObject() const;
    const char *name() const;
    QObject *parent() const;
    void removeChild(QObject *);
    void removeEventFilter(const QObject *);
    void setName(const char *);
    bool signalsBlocked() const;
    int startTimer(int);
protected:
    virtual void connectNotify(const char *{signal});
    void destroyed() signal;
    virtual void disconnectNotify(const char *{signal});
    const QObject *sender();
    virtual void timerEvent(QTimerEvent *);
} Object;
