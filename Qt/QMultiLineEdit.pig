#include <qmultilinedit.h>

suicidal virtual class QMultiLineEdit : virtual QTableView {
    QMultiLineEdit(QWidget * = 0, const char * = 0);
    virtual ~QMultiLineEdit();
    void append(const char *) slot;
    bool atBeginning() const;
    bool atEnd() const;
    bool autoUpdate() const;
    void clear() slot;
    void copyText() slot;
    void cursorPosition(int *, int *) const;
    void cut() slot;
    void deselect() slot;
    void getCursorPosition(int *, int *);
    virtual void insertAt(const char *, int, int);
    virtual void insertLine(const char *, int = -1);
    bool isOverwriteMode() const;
    bool isReadOnly() const;
    int numLines() const;
    void paste() slot;
    virtual void removeLine(int);
    void selectAll() slot;
    void setAutoUpdate(bool);
    void setCursorPosition(int, int, bool = FALSE);
    virtual void setFont(const QFont &);
    void setFixedVisibleLines(int);
    void setOverwriteMode(bool) slot;
    void setReadOnly(bool) slot;
    void setText(const char *) slot;
    QString text() const;
    const char *textLine(int) const;
protected:
    virtual void backspace();
    virtual void cursorDown(bool = FALSE);
    virtual void cursorLeft(bool = FALSE, bool = TRUE);
    virtual void cursorRight(bool = FALSE, bool = TRUE);
    QPoint cursorPoint() const;
    virtual void cursorUp(bool = FALSE);
    virtual void del();
    virtual void end(bool = FALSE);
    virtual void focusInEvent(QFocusEvent *);
    virtual void focusOutEvent(QFocusEvent *);
    bool getMarkedRegion(int *, int *, int *, int *) const;
    QString *getString(int) const;
    bool hasMarkedText() const;
    virtual void home(bool = FALSE);
    virtual void insertChar(char);
    virtual void keyPressEvent(QKeyEvent *);
    virtual void killLine();
    virtual void leaveEvent(QEvent *);
    int lineLength(int) const;
    QString markedText() const;
    virtual void mouseDoubleClickEvent(QMouseEvent *);
    virtual void mouseMoveEvent(QMouseEvent *);
    virtual void mousePressEvent(QMouseEvent *);
    virtual void mouseReleaseEvent(QMouseEvent *);
    virtual void newLine();
    virtual void pageDown(bool = FALSE);
    virtual void pageUp(bool = FALSE);
    virtual void paintCell(QPainter *, int, int);
    void returnPressed() signal;
    void textChanged() signal;
    int textWidth(int);
    int textWidth(QString *);
    virtual void timerEvent(QTimerEvent *);
} Qt::MultiLineEdit;
